{
	"Shell View Model": {
		"prefix": "shellviewmodel",
		"description": "View Model pour le projet Shell",
		"body": [
			"using System;",
			"",
			"namespace Product.Shell.Core.ViewModels",
			"{",
			"    public class $TM_FILENAME_BASE",
			"    {",
			"        $0",
			"    }",
			"}"
		]
	},
	"Create Command (Dat'Foundation)": {
		"prefix": "createcommand",
		"description": "Commande Create pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"",
			"using Bones.Flow;",
			"using Bones.Repository.Interfaces;",
			"",
			"using Product.Domain.Models;",
			"",
			"using static Product.Shell.Core.Authorizations;",
			"",
			"namespace Product.Shell.Core",
			"{",
			"    public class $TM_FILENAME_BASE : IRequest<IEntity<Guid>>, ICoreRequest",
			"    {",
			"        public IEnumerable<string> Authorizations => new[] { APP_${TM_FILENAME_BASE/(Create)([a-zA-Z]*)(Command)/${2:/upcase}/}_CREATE };",
			"        public Headers Headers { get; set; }",
			"",
			"        $0",
			"    }",
			"}"
		]
	},
	"Update Command (Dat'Foundation)": {
		"prefix": "updatecommand",
		"description": "Command Update pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"",
			"using Bones.Flow;",
			"using Bones.Repository.Interfaces;",
			"",
			"using Product.Domain.Models;",
			"",
			"using static Product.Shell.Core.Authorizations;",
			"",
			"namespace Product.Shell.Core",
			"{",
			"    public class $TM_FILENAME_BASE : IRequest<IEntity<Guid>>, ICoreRequest",
			"    {",
			"        public IEnumerable<string> Authorizations => new[] { APP_${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(Command)/${2:/upcase}/}_UPDATE };",
			"        public Headers Headers { get; set; }",
			"",
			"        public Guid ${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(Command)/${2}/}Id { get; set; }",
			"        $0",
			"    }",
			"}"
		]
	},
	"Remove Command (Dat'Foundation)": {
		"prefix": "removecommand",
		"description": "Commande Remove pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"",
			"using Product.Domain.Models;",
			"",
			"using static Product.Shell.Core.Authorizations;",
			"",
			"namespace Product.Shell.Core",
			"{",
			"    public class $TM_FILENAME_BASE : ICoreRequest",
			"    {",
			"        public IEnumerable<string> Authorizations => new[] { APP_${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(Command)/${2:/upcase}/}_REMOVE };",
			"        public Headers Headers { get; set; }",
			"",
			"        public Guid ${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(Command)/${2}/}Id { get; set; }",
			"    }",
			"}"
		]
	},
	"Get Query (Dat'Foundation)": {
		"prefix": "getquery",
		"description": "Requete Get pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"",
			"using Bones.Flow;",
			"",
			"using Product.Domain.Models;",
			"",
			"using static Product.Shell.Core.Authorizations;",
			"",
			"namespace Product.Shell.Core",
			"{",
			"    public class $TM_FILENAME_BASE : IRequest<${TM_FILENAME_BASE/([a-zA-Z]*)(Query)/${1}/}Details>, ICoreRequest",
			"    {",
			"        public IEnumerable<string> Authorizations => new[] { APP_${TM_FILENAME_BASE/([a-zA-Z]*)(Query)/${1:/upcase}/}_DETAILS };",
			"        public Headers Headers { get; set; }",
			"",
			"        public Guid ${TM_FILENAME_BASE/([a-zA-Z]*)(Query)/${1}/}Id { get; set; }",
			"    }",
			"}"
		]
	},
	"GetMany Query (Dat'Foundation)": {
		"prefix": "getmanyquery",
		"description": "Requete GetMany pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"",
			"using Bones.Flow;",
			"",
			"using Product.Domain.Models;",
			"",
			"using static Product.Shell.Core.Authorizations;",
			"",
			"namespace Product.Shell.Core",
			"{",
			"    public class $TM_FILENAME_BASE : IRequest<IEnumerable<${TM_FILENAME_BASE/([a-zA-Z]*)(sQuery)/${1}/}Infos>>, ICoreRequest",
			"    {",
			"        public IEnumerable<string> Authorizations => new[] { APP_${TM_FILENAME_BASE/([a-zA-Z]*)(sQuery)/${1:/upcase}/}_INFOS };",
			"        public Headers Headers { get; set; }",
			"",
			"        $0",
			"    }",
			"}"
		]
	},
	"Create CommandHandler (Dat'Foundation)": {
		"prefix": "createcommandhandler",
		"description": "CreateCommandHandler pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Threading;",
			"using System.Threading.Tasks;",
			"",
			"using Bones.Flow;",
			"using Bones.Repository.Interfaces;",
			"",
			"using Product.Domain.Repositories.Commands;",
			"using Product.Domain.Repositories.Interfaces;",
			"",
			"namespace Product.Shell.Core.Handlers",
			"{",
			"    public class $TM_FILENAME_BASE : IMiddleware<${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/}, IEntity<Guid>>",
			"    {",
			"        private I${TM_FILENAME_BASE/(Create)([a-zA-Z]*)(CommandHandler)/${2}/}Repository _${TM_FILENAME_BASE/(Create)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository;",
			"",
			"        public $TM_FILENAME_BASE(I${TM_FILENAME_BASE/(Create)([a-zA-Z]*)(CommandHandler)/${2}/}Repository ${TM_FILENAME_BASE/(Create)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository)",
			"        {",
			"            _${TM_FILENAME_BASE/(Create)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository = ${TM_FILENAME_BASE/(Create)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository;",
			"        }",
			"",
			"        public async Task<IEntity<Guid>> HandleAsync(${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/} command, Func<Task<IEntity<Guid>>> next, CancellationToken cancellationToken)",
			"        {",
			"            var ${TM_FILENAME_BASE/([a-zA-Z]*)(CommandHandler)/${1:/camelcase}/} = new ${TM_FILENAME_BASE/([a-zA-Z]*)(CommandHandler)/${1}/}()",
			"            {",
			"                $0",
			"            };",
			"",
			"            return await _${TM_FILENAME_BASE/(Create)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository.Create(${TM_FILENAME_BASE/([a-zA-Z]*)(CommandHandler)/${1:/camelcase}/});",
			"        }",
			"    }",
			"}"
		]
	},
	"Update CommandHandler (Dat'Foundation)": {
		"prefix": "updatecommandhandler",
		"description": "UpdateCommandHandler pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Threading;",
			"using System.Threading.Tasks;",
			"",
			"using Bones.Flow;",
			"using Bones.Repository.Interfaces;",
			"",
			"using Product.Domain.Repositories.Commands;",
			"using Product.Domain.Repositories.Interfaces;",
			"",
			"namespace Product.Shell.Core.Handlers",
			"{",
			"    public class $TM_FILENAME_BASE : IMiddleware<${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/}, IEntity<Guid>>",
			"    {",
			"        private I${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(CommandHandler)/${2}/}Repository _${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository;",
			"",
			"        public $TM_FILENAME_BASE(I${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(CommandHandler)/${2}/}Repository ${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository)",
			"        {",
			"            _${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository = ${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository;",
			"        }",
			"",
			"        public async Task<IEntity<Guid>> HandleAsync(${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/} command, Func<Task<IEntity<Guid>>> next, CancellationToken cancellationToken)",
			"        {",
			"            var ${TM_FILENAME_BASE/([a-zA-Z]*)(CommandHandler)/${1:/camelcase}/} = new ${TM_FILENAME_BASE/([a-zA-Z]*)(CommandHandler)/${1}/}()",
			"            {",
			"                ${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(CommandHandler)/${2}/}Id = command.${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(CommandHandler)/${2}/}Id,",
			"                $0",
			"            };",
			"",
			"            return await _${TM_FILENAME_BASE/(Update)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository.Update(${TM_FILENAME_BASE/([a-zA-Z]*)(CommandHandler)/${1:/camelcase}/});",
			"        }",
			"    }",
			"}"
		]
	},
	"Remove CommandHandler (Dat'Foundation)": {
		"prefix": "removecommandhandler",
		"description": "RemoveCommandHandler pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Threading;",
			"using System.Threading.Tasks;",
			"",
			"using Bones.Flow;",
			"",
			"using Product.Domain.Repositories.Interfaces;",
			"",
			"namespace Product.Shell.Core.Handlers",
			"{",
			"    public class $TM_FILENAME_BASE : IMiddleware<${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/}>",
			"    {",
			"        private I${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(CommandHandler)/${2}/}Repository _${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository;",
			"",
			"        public $TM_FILENAME_BASE(I${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(CommandHandler)/${2}/}Repository ${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository)",
			"        {",
			"            _${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository = ${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository;",
			"        }",
			"",
			"        public async Task HandleAsync(${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/} command, Func<Task> next, CancellationToken cancellationToken)",
			"        {",
			"            await _${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(CommandHandler)/${2:/camelcase}/}Repository.Remove(command.${TM_FILENAME_BASE/(Remove)([a-zA-Z]*)(CommandHandler)/${2}/}Id);",
			"        }",
			"    }",
			"}"
		]
	},
	"Get QueryHandler (Dat'Foundation)": {
		"prefix": "getqueryhandler",
		"description": "GetQueryHandler pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Threading;",
			"using System.Threading.Tasks;",
			"",
			"using Bones.Flow;",
			"",
			"using Product.Domain.Models;",
			"using Product.Domain.Repositories.Interfaces;",
			"",
			"namespace Product.Shell.Core.Handlers",
			"{",
			"    public class $TM_FILENAME_BASE : IMiddleware<${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/}, ${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1}/}Details>",
			"    {",
			"        private I${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1}/}Repository _${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1:/camelcase}/}Repository;",
			"",
			"        public $TM_FILENAME_BASE(I${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1}/}Repository ${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1:/camelcase}/}Repository)",
			"        {",
			"            _${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1:/camelcase}/}Repository = ${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1:/camelcase}/}Repository;",
			"        }",
			"",
			"        public async Task<${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1}/}Details> HandleAsync(${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/} request, Func<Task<${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1}/}Details>> next, CancellationToken cancellationToken)",
			"        {",
			"            return await _${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1:/camelcase}/}Repository.Get(request.${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1}/}Id);",
			"        }",
			"    }",
			"}"
		]
	},
	"GetMany QueryHandler (Dat'Foundation)": {
		"prefix": "getmanyqueryhandler",
		"description": "GetManyQueryHandler pour Dat'Foundation",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Threading;",
			"using System.Threading.Tasks;",
			"",
			"using Bones.Flow;",
			"",
			"using Product.Domain.Models;",
			"using Product.Domain.Repositories.Filters;",
			"using Product.Domain.Repositories.Interfaces;",
			"",
			"namespace Product.Shell.Core.Handlers",
			"{",
			"    public class $TM_FILENAME_BASE : IMiddleware<${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/}, IEnumerable<${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1}/}Infos>>",
			"    {",
			"        private I${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1}/}Repository _${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1:/camelcase}/}Repository;",
			"",
			"        public $TM_FILENAME_BASE(I${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1}/}Repository ${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1:/camelcase}/}Repository)",
			"        {",
			"            _${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1:/camelcase}/}Repository = ${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1:/camelcase}/}Repository;",
			"        }",
			"",
			"        public async Task<IEnumerable<${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1}/}Infos>> HandleAsync(${TM_FILENAME_BASE/([a-zA-Z]*)(Handler)/${1}/} request, Func<Task<IEnumerable<${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1}/}Infos>>> next, CancellationToken cancellationToken)",
			"        {",
			"            var ${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1:/camelcase}/}Filter = new ${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1}/}Filter()",
			"            {",
			"                $0",
			"            };",
			"",
			"            return await _${TM_FILENAME_BASE/([a-zA-Z]*)(sQueryHandler)/${1:/camelcase}/}Repository.GetMany(${TM_FILENAME_BASE/([a-zA-Z]*)(QueryHandler)/${1:/camelcase}/}Filter);",
			"        }",
			"    }",
			"}"
		]
	},
	"Couchbase Repository (Dat'Acquisition)": {
		"prefix": "couchbaserepository",
		"description": "Repository Couchbase pour Dat'Acquisition",
		"body": [
			"using System;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"using System.Collections.Generic;",
			"using System.Diagnostics.Contracts;",
			"",
			"using Couchbase.Lite;",
			"using Couchbase.Lite.Query;",
			"",
			"using Bones.Repository.Interfaces;",
			"",
			"using Monitoring.Domain.Models;",
			"using Monitoring.Domain.Repositories.Filters;",
			"using Monitoring.Domain.Repositories.Commands;",
			"using Monitoring.Domain.Repositories.Interfaces;",
			"",
			"using Monitoring.Context.Core.DTOs;",
			"",
			"namespace Monitoring.Context.Core.Repositories",
			"{",
			"    public class $TM_FILENAME_BASE : I$TM_FILENAME_BASE",
			"    {",
			"        private const string ${TM_FILENAME_BASE/(.*)(Repository)/${1:/upcase}/}S = \"${TM_FILENAME_BASE/(.*)(Repository)/${1:/downcase}/}s\";",
			"",
			"        private ApplicationContext _context;",
			"        private Database _db;",
			"",
			"        public $TM_FILENAME_BASE(ApplicationContext context)",
			"        {",
			"            _context = context;",
			"            _db = context.Database;",
			"        }",
			"",
			"        public Task<${TM_FILENAME_BASE/(.*)(Repository)/$1/}Details> Get(string id)",
			"        {",
			"            var whereExpression = $\"{${TM_FILENAME_BASE/(.*)(Repository)/${1:/upcase}/}S}.{nameof(${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.Id)} = '{id}'\";",
			"",
			"            var result = Get${TM_FILENAME_BASE/(.*)(Repository)/$1/}s(whereExpression);",
			"            var ${TM_FILENAME_BASE/(.*)(Repository)/${1:/downcase}/}s = result.Select(r => r.ToObject<${TM_FILENAME_BASE/(.*)(Repository)/$1/}Details>());",
			"",
			"            return Task.FromResult(${TM_FILENAME_BASE/(.*)(Repository)/${1:/downcase}/}s.SingleOrDefault());",
			"        }",
			"",
			"        public Task<IEnumerable<${TM_FILENAME_BASE/(.*)(Repository)/$1/}Infos>> GetAll(${TM_FILENAME_BASE/(.*)(Repository)/$1/}Filter filter)",
			"        {",
			"            List<string> whereExpressions = new List<string>();",
			"",
			"            whereExpressions.Add(",
			"                $@\"(",
			"                    {${TM_FILENAME_BASE/(.*)(Repository)/${1:/upcase}/}S}.{nameof(${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.Disabled)} = FALSE OR",
			"                    {${TM_FILENAME_BASE/(.*)(Repository)/${1:/upcase}/}S}.{nameof(${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.Disabled)} IS NOT VALUED",
			"                )\"",
			"            );",
			"",
			"            // TODO",
			"",
			"            var result = Get${TM_FILENAME_BASE/(.*)(Repository)/$1/}s(whereExpressions.ToArray());",
			"",
			"            var ${TM_FILENAME_BASE/(.*)(Repository)/${1:/downcase}/}s = result.Select(r => r.ToObject<${TM_FILENAME_BASE/(.*)(Repository)/$1/}Infos>());",
			"            return Task.FromResult(${TM_FILENAME_BASE/(.*)(Repository)/${1:/downcase}/}s);",
			"",
			"        }",
			"",
			"        public Task<IEntity<string>> Add(Create${TM_FILENAME_BASE/(.*)(Repository)/$1/} create)",
			"        {",
			"            var dto = new ${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO()",
			"            {",
			"                Id = Guid.NewGuid().ToString(),",
			"                Disabled = false,",
			"                // TODO",
			"            };",
			"",
			"            using (var doc = dto.ToMutableDocument(dto.Id))",
			"            {",
			"                _db.Save(doc);",
			"            }",
			"",
			"            return Task.FromResult<IEntity<string>>(dto);",
			"        }",
			"",
			"        public Task<IEntity<string>> Update(Update${TM_FILENAME_BASE/(.*)(Repository)/$1/} update)",
			"        {",
			"            var doc = _db.GetDocument(update.Id);",
			"            if (doc == null) throw new ArgumentException($\"Invalid ID : {update.Id}\");",
			"            var dto = doc.ToObject<${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO>();",
			"",
			"            // TODO",
			"",
			"            using (var m = dto.ToMutableDocument(dto.Id))",
			"            {",
			"                _db.Save(m);",
			"            }",
			"",
			"            return Task.FromResult<IEntity<string>>(dto);",
			"        }",
			"",
			"        public Task Delete(string id)",
			"        {",
			"            var doc = _db.GetDocument(id);",
			"            if (doc == null) throw new ArgumentException($\"Invalid ID : {id}\");",
			"            Contract.Assert(doc.GetString(nameof(${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.Type)) == ${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.TYPE);",
			"",
			"            using (var mutableDocument = doc.ToMutable())",
			"            {",
			"                mutableDocument.SetBoolean(nameof(${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.Disabled), true);",
			"                _db.Save(mutableDocument);",
			"            }",
			"",
			"            return Task.CompletedTask;",
			"        }",
			"",
			"",
			"",
			"        private IEnumerable<Result> Get${TM_FILENAME_BASE/(.*)(Repository)/$1/}s(params string[] whereExpressions)",
			"        {",
			"            // Select",
			"",
			"            string select = $@\"",
			"                SELECT",
			"                    {${TM_FILENAME_BASE/(.*)(Repository)/${1:/upcase}/}S}.{nameof(${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.Id)}, ",
			"                    {${TM_FILENAME_BASE/(.*)(Repository)/${1:/upcase}/}S}.{nameof(${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.Disabled)}, ",
			"            \"; // TODO",
			"",
			"            // From",
			"",
			"            string from = $@\"",
			"                FROM",
			"                    _ AS {${TM_FILENAME_BASE/(.*)(Repository)/${1:/upcase}/}S}",
			"            \";",
			"",
			"            // Where",
			"",
			"            string where = $@\"",
			"                WHERE",
			"                    {${TM_FILENAME_BASE/(.*)(Repository)/${1:/upcase}/}S}.{nameof(${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.Type)} = \"\"{${TM_FILENAME_BASE/(.*)(Repository)/$1/}DTO.TYPE}\"\"",
			"            \";",
			"",
			"            foreach (var expr in whereExpressions)",
			"            {",
			"                where = where + \" AND \" + expr;",
			"            }",
			"",
			"            // Execute",
			"",
			"            var query = _db.CreateQuery($\"{select} {from} {where};\");",
			"",
			"            return query.Execute().AllResults();",
			"        }",
			"    }",
			"}"
		]
	}
}